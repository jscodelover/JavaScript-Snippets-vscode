{
  "console log": {
    "prefix": "clog",
    "body": ["console.log(${1:obj});"],
    "description": "Display the logging information"
  },
  "console log key-value pair": {
    "prefix": "cl",
    "body": ["console.log('${1:obj}:',${2:obj});"],
    "description": "Display the logging information in key value pair"
  },
  "console clear": {
    "prefix": "cclr",
    "body": ["console.clear();"],
    "description": "Clear the console"
  },
  "console warn": {
    "prefix": "cw",
    "body": ["console.warn(${1:obj});"],
    "description": "Outputs a warning message"
  },
  "console table": {
    "prefix": "ct",
    "body": ["console.table(${1:obj});"],
    "description": "Displays tabular data as a table"
  },
  "console assert": {
    "prefix": "cass",
    "body": ["console.assert(${1:expression}, ${2:obj});"],
    "description": "Writes an error message to the console if the expression is false"
  },
  "console count": {
    "prefix": "cc",
    "body": ["console.count(${1:label});"],
    "description": "Keep count of how many times your code is read "
  },
  "console countReset": {
    "prefix": "ccr",
    "body": ["console.countReset(${1:label});"],
    "description": "Resets the counter"
  },
  "console dir": {
    "prefix": "cdir",
    "body": ["console.dir(${1:obj}, {colors: ${2:true}, depth: ${3:null}});"],
    "description": "Display all the properties of an object"
  },
  "console error": {
    "prefix": "cerr",
    "body": ["console.error(${1:obj});"],
    "description": "Outputs an error message"
  },
  "console group": {
    "prefix": "cgrp",
    "body": ["console.group(${1:label});"],
    "description": "Creates a new inline group in the Web Console"
  },
  "console groupEnd": {
    "prefix": "cend",
    "body": ["console.groupEnd();"],
    "description": "Exits the current inline group in the Web Console"
  },
  "console info": {
    "prefix": "cin",
    "body": ["console.info(${1:obj})"],
    "description": "Outputs an informational message with a icon"
  },
  "console time": {
    "prefix": "ctym",
    "body": ["console.time(${1:label});"],
    "description": "Starts a timer you can use to track how long an operation takes"
  },
  "console timeEnd": {
    "prefix": "cte",
    "body": ["console.timeEnd(${1:label});"],
    "description": "Stops a timer that was previously started"
  },
  "console timeLog": {
    "prefix": "ctg",
    "body": ["console.timeLog(${1:label});"],
    "description": "Logs the current value of a timer that was previously started"
  },
  "console trace": {
    "prefix": "ctr",
    "body": ["console.trace(${1:label});"],
    "description": "Display the trace which represents how the code ended up at a certain point"
  },
  "named function": {
    "prefix": "nfn",
    "body": ["function ${1:functionName}($2){", "  $3", "}"],
    "description": "Named Function"
  },
  "anonymous function": {
    "prefix": "fn",
    "body": ["function($1){", "  $2", "}"],
    "description": "Anonymous function"
  },
  "arrow function": {
    "prefix": "afn",
    "body": ["const ${1:functionName} = ($2) => {", "  $3", "}"],
    "description": "Arrow function"
  },
  "IIFE": {
    "prefix": "iife",
    "body": ["(function ($1) {", "    $2", "})();"],
    "description": "IIFE"
  },
  "IIFE with result": {
    "prefix": "iifer",
    "body": [
      "const ${1:result} = (function ($1) {",
      "    $2",
      "  return ;",
      "})();",
      "console.log(${1:result});"
    ],
    "description": "IIFE with result"
  },
  "Array Method": {
    "prefix": "arrmth",
    "body": [
      "${1:iterable}.${2|forEach,map,filter,find,every,some|}((${3:item}) => {",
      "  $4",
      "})"
    ],
    "description": "Array Method"
  },
  "Reduce": {
    "prefix": "reduce",
    "body": [
      "${1:iterable}.reduce((${2:acc}, ${3:item}) => {",
      "  ${5}",
      "}${4:, initial})",
      ""
    ],
    "description": "Array Method Reduce"
  },
  "Basic If Statement": {
    "prefix": "ifc",
    "body": ["if(${1:condition}) {", "  $2", "}"],
    "description": "If Statement"
  },
  "If Else Statement": {
    "prefix": "ifelsec",
    "body": ["if(${1:condition}) {", "  $2", "} else {", "  $3", "}"],
    "description": "If else statement"
  },
  "switch statment": {
    "prefix": "swt",
    "body": [
      "switch(${1:expression}){",
      "  case ${2:condition}: $3",
      "                       break;",
      "  case ${4:condition}: $5",
      "                       break;",
      "  case ${6:condition}: $7",
      "                       break;",
      "  default: $8;",
      "}"
    ],
    "description": "Switch Statment"
  },
  "fetch with catch": {
    "prefix": "fetchc",
    "body": [
      "fetch('${1:url}')",
      "  .then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    } else {",
      "      throw new Error('Something went wrong on api server!');",
      "    }",
      "  })",
      "  .then(data => {",
      "    console.debug(data);",
      "  }).catch(error => {",
      "    console.error(error);",
      "  });"
    ],
    "description": "Fetch with Catch"
  },
  "Fetch Request": {
    "prefix": "fetch",
    "body": [
      "fetch('${1:url}')",
      "  .then(res => res.json())",
      "  .then(data => console.log(data));"
    ],
    "description": "Fetch Request"
  },
  "Async/Await Fetch": {
    "prefix": "asyncfetch",
    "body": [
      "const request = async ($1) => {",
      "    const response = await fetch('${2:url}');",
      "    const data = await response.json();",
      "    console.log(data);",
      "}"
    ],
    "description": "Fetch Async/Await"
  },
  "Async/Await Fetch with catch": {
    "prefix": "asyncfetchc",
    "body": [
      "const request = async ($1) => {",
      "  const response = await fetch('${2:url}');",
      "  if(response.status === 200){",
      "    const data = await response.json();",
      "    console.log(data);",
      "  }",
      "  else{",
      "    console.log(\"error\");",
      "  }",
      "}"
    ],
    "description": "Async/Await Fetch with catch"
  },
  "try and catch": {
    "prefix": "tc",
    "body": ["try {", "  $1", "}catch (err){", "  $2", "}"],
    "description": "try and catch"
  },
  "try, catch and finally": {
    "prefix": "tcf",
    "body": [
      "try {",
      "  $1",
      "}catch (err){",
      "  $2",
      "}",
      "finally{",
      "  $3",
      "}"
    ],
    "description": "try, catch and finally"
  },
  "Axios Request": {
    "prefix": "ax",
    "body": [
      "axios.${1|get,post,put,delete|}('${2:url}')",
      "  .then(res => console.log(res.data))",
      "  .catch(err => console.log(err));"
    ],
    "description": "Axios Request"
  },
  "Async/Await Axios": {
    "prefix": "asyncax",
    "body": [
      "async function ${1:functionName}() {",
      "  try {",
      "    const response = await axios.${2|get,post,put,delete|}('${3:url}');",
      "    const data = await response.json();",
      "    return data;",
      "  } catch (error) {",
      "    console.log(error);",
      "  }",
      "}"
    ],
    "description": "Async/Await Axios"
  }
}
